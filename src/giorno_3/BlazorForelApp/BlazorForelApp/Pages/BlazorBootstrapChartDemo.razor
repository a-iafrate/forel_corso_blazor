@page "/blazor-bootstrap-demo-chart"

<PageTitle>Blazor.Bootstrap Components Demo</PageTitle>

<div class="container-fluid">
    <h1 class="mb-4">Demo Componenti Blazor.Bootstrap</h1>
    <p class="lead text-muted">Panoramica dei principali componenti di Blazor.Bootstrap per il corso</p>

    <div class="row g-4">
        <!-- Alert Components -->
        <div class="col-12">
            ﻿<BarChart @ref="barChart" Width="500" Height="300" />
        </div>

       
    </div>
</div>

@code {
    private BarChart barChart = default!;
    private BarChartOptions barChartOptions = default!;
    private ChartData chartData = default!;

    protected override void OnInitialized()
    {
        var colors = ColorUtility.CategoricalTwelveColors;

        var labels = new List<string> { "Chrome", "Firefox", "Safari", "Edge" };
        var datasets = new List<IChartDataset>();

        var dataset1 = new BarChartDataset()
        {
            Label = "Windows",
            Data = new List<double?> { 28000, 8000, 2000, 17000 },
            BackgroundColor = new List<string> { colors[0] },
            BorderColor = new List<string> { colors[0] },
            BorderWidth = new List<double> { 0 },
        };
        datasets.Add(dataset1);

        var dataset2 = new BarChartDataset()
        {
            Label = "macOS",
            Data = new List<double?> { 8000, 10000, 14000, 8000 },
            BackgroundColor = new List<string> { colors[1] },
            BorderColor = new List<string> { colors[1] },
            BorderWidth = new List<double> { 0 },
        };
        datasets.Add(dataset2);

        var dataset3 = new BarChartDataset()
        {
            Label = "Other",
            Data = new List<double?> { 28000, 10000, 14000, 8000 },
            BackgroundColor = new List<string> { colors[2] },
            BorderColor = new List<string> { colors[2] },
            BorderWidth = new List<double> { 0 },
        };
        datasets.Add(dataset3);

        chartData = new ChartData { Labels = labels, Datasets = datasets };

        barChartOptions = new();
        barChartOptions.Responsive = true;
        barChartOptions.Interaction = new Interaction { Mode = InteractionMode.Y };
        barChartOptions.IndexAxis = "y";

        barChartOptions.Scales.X!.Title = new ChartAxesTitle { Text = "Visitors", Display = true };
        barChartOptions.Scales.Y!.Title = new ChartAxesTitle { Text = "Browser", Display = true };

        barChartOptions.Scales.X.Stacked = true;
        barChartOptions.Scales.Y.Stacked = true;

        barChartOptions.Plugins.Title!.Text = "Operating system";
        barChartOptions.Plugins.Title.Display = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await barChart.InitializeAsync(chartData, barChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
@page "/storage"
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JS

<PageTitle>Sessions Storage</PageTitle>

<h1>LocalStorage e ProtectedLocalStorage</h1>

<p>Questo componente dimostra l'uso di localStorage con Blazored.LocalStorage e un esempio di storage protetto.</p>

<div class="row">
    <div class="col-md-6">
        <h3>LocalStorage (Blazored.LocalStorage)</h3>
        <div class="mb-3">
            <label class="form-label">Chiave:</label>
            <input @bind="localStorageKey" class="form-control" />
        </div>
        <div class="mb-3">
            <label class="form-label">Valore:</label>
            <input @bind="localStorageValue" class="form-control" />
        </div>
        <button @onclick="SaveToLocalStorage" class="btn btn-primary">Salva in LocalStorage</button>
        <button @onclick="LoadFromLocalStorage" class="btn btn-secondary">Carica da LocalStorage</button>
        <button @onclick="RemoveFromLocalStorage" class="btn btn-danger">Rimuovi da LocalStorage</button>
        <button @onclick="ClearAllLocalStorage" class="btn btn-warning">Cancella Tutto</button>
        
        @if (!string.IsNullOrEmpty(localStorageResult))
        {
            <div class="alert alert-info mt-3">
                <strong>Risultato:</strong> @localStorageResult
            </div>
        }
    </div>

    <div class="col-md-6">
        <h3>Oggetti Complessi</h3>
        <div class="mb-3">
            <label class="form-label">Nome Utente:</label>
            <input @bind="userData.Username" class="form-control" />
        </div>
        <div class="mb-3">
            <label class="form-label">Email:</label>
            <input @bind="userData.Email" class="form-control" />
        </div>
        <div class="mb-3">
            <label class="form-label">Età:</label>
            <input @bind="userData.Age" type="number" class="form-control" />
        </div>
        <button @onclick="SaveUserData" class="btn btn-primary">Salva Oggetto</button>
        <button @onclick="LoadUserData" class="btn btn-secondary">Carica Oggetto</button>
        <button @onclick="RemoveUserData" class="btn btn-danger">Rimuovi Oggetto</button>
        
        @if (!string.IsNullOrEmpty(userDataResult))
        {
            <div class="alert alert-success mt-3">
                <strong>Risultato:</strong> @userDataResult
            </div>
        }
    </div>
</div>

<div class="row mt-4">
    <div class="col-md-12">
        <h3>Storage Protetto (Simulato con Base64)</h3>
        <div class="mb-3">
            <label class="form-label">Chiave:</label>
            <input @bind="protectedStorageKey" class="form-control" />
        </div>
        <div class="mb-3">
            <label class="form-label">Valore Sensibile:</label>
            <input @bind="protectedStorageValue" type="password" class="form-control" />
        </div>
        <button @onclick="SaveToProtectedStorage" class="btn btn-primary">Salva (Codificato)</button>
        <button @onclick="LoadFromProtectedStorage" class="btn btn-secondary">Carica (Decodificato)</button>
        <button @onclick="RemoveFromProtectedStorage" class="btn btn-danger">Rimuovi</button>
        
        @if (!string.IsNullOrEmpty(protectedStorageResult))
        {
            <div class="alert alert-warning mt-3">
                <strong>Risultato:</strong> @protectedStorageResult
            </div>
        }
    </div>
</div>

<div class="mt-4">
    <h4>Note:</h4>
    <ul>
        <li><strong>Blazored.LocalStorage:</strong> Libreria type-safe per gestire localStorage senza JSInterop diretto.</li>
        <li><strong>Supporto Oggetti:</strong> Serializza/deserializza automaticamente oggetti complessi in JSON.</li>
        <li><strong>Storage Protetto:</strong> Per Blazor WebAssembly, la vera crittografia lato client è limitata. Questo esempio usa Base64 come dimostrazione.</li>
        <li><strong>Metodi Asincroni:</strong> Tutti i metodi sono async per migliori performance.</li>
    </ul>
</div>

@code {
    // LocalStorage variables
    private string localStorageKey = "myKey";
    private string localStorageValue = "myValue";
    private string? localStorageResult;

    // User data variables
    private UserData userData = new() { Username = "Mario", Email = "mario@example.com", Age = 30 };
    private string? userDataResult;

    // Protected storage variables
    private string protectedStorageKey = "myProtectedKey";
    private string protectedStorageValue = "mySecretValue";
    private string? protectedStorageResult;

    // LocalStorage methods (Blazored.LocalStorage)
    private async Task SaveToLocalStorage()
    {
        try
        {
            await LocalStorage.SetItemAsStringAsync(localStorageKey, localStorageValue);
            localStorageResult = $"Salvato: '{localStorageKey}' = '{localStorageValue}'";
        }
        catch (Exception ex)
        {
            localStorageResult = $"Errore: {ex.Message}";
        }
    }

    private async Task LoadFromLocalStorage()
    {
        try
        {
            var value = await LocalStorage.GetItemAsStringAsync(localStorageKey);
            if (value != null)
            {
                localStorageValue = value;
                localStorageResult = $"Caricato: '{localStorageKey}' = '{value}'";
            }
            else
            {
                localStorageResult = $"Chiave '{localStorageKey}' non trovata";
            }
        }
        catch (Exception ex)
        {
            localStorageResult = $"Errore: {ex.Message}";
        }
    }

    private async Task RemoveFromLocalStorage()
    {
        try
        {
            await LocalStorage.RemoveItemAsync(localStorageKey);
            localStorageResult = $"Rimosso: '{localStorageKey}'";
        }
        catch (Exception ex)
        {
            localStorageResult = $"Errore: {ex.Message}";
        }
    }

    private async Task ClearAllLocalStorage()
    {
        try
        {
            await LocalStorage.ClearAsync();
            localStorageResult = "LocalStorage completamente svuotato";
        }
        catch (Exception ex)
        {
            localStorageResult = $"Errore: {ex.Message}";
        }
    }

    // Complex object methods
    private async Task SaveUserData()
    {
        try
        {
            await LocalStorage.SetItemAsync("userData", userData);
            userDataResult = $"Salvato oggetto: {userData.Username}, {userData.Email}, {userData.Age} anni";
        }
        catch (Exception ex)
        {
            userDataResult = $"Errore: {ex.Message}";
        }
    }

    private async Task LoadUserData()
    {
        try
        {
            var loadedData = await LocalStorage.GetItemAsync<UserData>("userData");
            if (loadedData != null)
            {
                userData = loadedData;
                userDataResult = $"Caricato: {userData.Username}, {userData.Email}, {userData.Age} anni";
            }
            else
            {
                userDataResult = "Nessun dato utente trovato";
            }
        }
        catch (Exception ex)
        {
            userDataResult = $"Errore: {ex.Message}";
        }
    }

    private async Task RemoveUserData()
    {
        try
        {
            await LocalStorage.RemoveItemAsync("userData");
            userDataResult = "Dati utente rimossi";
        }
        catch (Exception ex)
        {
            userDataResult = $"Errore: {ex.Message}";
        }
    }

    // Protected storage methods (simulato con Base64)
    private async Task SaveToProtectedStorage()
    {
        try
        {
            // Codifica il valore in Base64 (nota: non è vera crittografia!)
            var encodedValue = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(protectedStorageValue));
            await LocalStorage.SetItemAsStringAsync($"protected_{protectedStorageKey}", encodedValue);
            protectedStorageResult = $"Salvato (codificato): '{protectedStorageKey}' = '{protectedStorageValue}' → '{encodedValue}'";
        }
        catch (Exception ex)
        {
            protectedStorageResult = $"Errore: {ex.Message}";
        }
    }

    private async Task LoadFromProtectedStorage()
    {
        try
        {
            var encodedValue = await LocalStorage.GetItemAsStringAsync($"protected_{protectedStorageKey}");
            if (encodedValue != null)
            {
                // Decodifica il valore da Base64
                var decodedBytes = Convert.FromBase64String(encodedValue);
                protectedStorageValue = System.Text.Encoding.UTF8.GetString(decodedBytes);
                protectedStorageResult = $"Caricato (decodificato): '{protectedStorageKey}' = '{protectedStorageValue}'";
            }
            else
            {
                protectedStorageResult = $"Chiave '{protectedStorageKey}' non trovata";
            }
        }
        catch (Exception ex)
        {
            protectedStorageResult = $"Errore: {ex.Message}";
        }
    }

    private async Task RemoveFromProtectedStorage()
    {
        try
        {
            await LocalStorage.RemoveItemAsync($"protected_{protectedStorageKey}");
            protectedStorageResult = $"Rimosso: '{protectedStorageKey}'";
        }
        catch (Exception ex)
        {
            protectedStorageResult = $"Errore: {ex.Message}";
        }
    }

    // Classe per oggetti complessi
    public class UserData
    {
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public int Age { get; set; }
    }
}
